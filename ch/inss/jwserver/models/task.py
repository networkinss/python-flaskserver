# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ch.inss.jwserver.models.base_model_ import Model
from ch.inss.jwserver import util


class Task(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, enabled=None, shell=None, firstarg=None, precheckfile=None, args=None, postcheckfile=None, inputmustache=None, replacemustache=None):  # noqa: E501
        """Task - a model defined in OpenAPI

        :param name: The name of this Task.  # noqa: E501
        :type name: str
        :param enabled: The enabled of this Task.  # noqa: E501
        :type enabled: str
        :param shell: The shell of this Task.  # noqa: E501
        :type shell: str
        :param firstarg: The firstarg of this Task.  # noqa: E501
        :type firstarg: str
        :param precheckfile: The precheckfile of this Task.  # noqa: E501
        :type precheckfile: str
        :param args: The args of this Task.  # noqa: E501
        :type args: List[str]
        :param postcheckfile: The postcheckfile of this Task.  # noqa: E501
        :type postcheckfile: List[str]
        :param inputmustache: The inputmustache of this Task.  # noqa: E501
        :type inputmustache: str
        :param replacemustache: The replacemustache of this Task.  # noqa: E501
        :type replacemustache: str
        """
        self.openapi_types = {
            'name': str,
            'enabled': str,
            'shell': str,
            'firstarg': str,
            'precheckfile': str,
            'args': List[str],
            'postcheckfile': List[str],
            'inputmustache': str,
            'replacemustache': str
        }

        self.attribute_map = {
            'name': 'name',
            'enabled': 'enabled',
            'shell': 'shell',
            'firstarg': 'firstarg',
            'precheckfile': 'precheckfile',
            'args': 'args',
            'postcheckfile': 'postcheckfile',
            'inputmustache': 'inputmustache',
            'replacemustache': 'replacemustache'
        }

        self._name = name
        self._enabled = enabled
        self._shell = shell
        self._firstarg = firstarg
        self._precheckfile = precheckfile
        self._args = args
        self._postcheckfile = postcheckfile
        self._inputmustache = inputmustache
        self._replacemustache = replacemustache

    @classmethod
    def from_dict(cls, dikt) -> 'Task':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Task of this Task.  # noqa: E501
        :rtype: Task
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Task.


        :return: The name of this Task.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Task.


        :param name: The name of this Task.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) < 17:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `17`")  # noqa: E501

        self._name = name

    @property
    def enabled(self):
        """Gets the enabled of this Task.


        :return: The enabled of this Task.
        :rtype: str
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Task.


        :param enabled: The enabled of this Task.
        :type enabled: str
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")  # noqa: E501
        if enabled is not None and len(enabled) < 4:
            raise ValueError("Invalid value for `enabled`, length must be greater than or equal to `4`")  # noqa: E501

        self._enabled = enabled

    @property
    def shell(self):
        """Gets the shell of this Task.


        :return: The shell of this Task.
        :rtype: str
        """
        return self._shell

    @shell.setter
    def shell(self, shell):
        """Sets the shell of this Task.


        :param shell: The shell of this Task.
        :type shell: str
        """
        if shell is None:
            raise ValueError("Invalid value for `shell`, must not be `None`")  # noqa: E501
        if shell is not None and len(shell) < 14:
            raise ValueError("Invalid value for `shell`, length must be greater than or equal to `14`")  # noqa: E501

        self._shell = shell

    @property
    def firstarg(self):
        """Gets the firstarg of this Task.


        :return: The firstarg of this Task.
        :rtype: str
        """
        return self._firstarg

    @firstarg.setter
    def firstarg(self, firstarg):
        """Sets the firstarg of this Task.


        :param firstarg: The firstarg of this Task.
        :type firstarg: str
        """
        if firstarg is None:
            raise ValueError("Invalid value for `firstarg`, must not be `None`")  # noqa: E501
        if firstarg is not None and len(firstarg) < 3:
            raise ValueError("Invalid value for `firstarg`, length must be greater than or equal to `3`")  # noqa: E501

        self._firstarg = firstarg

    @property
    def precheckfile(self):
        """Gets the precheckfile of this Task.


        :return: The precheckfile of this Task.
        :rtype: str
        """
        return self._precheckfile

    @precheckfile.setter
    def precheckfile(self, precheckfile):
        """Sets the precheckfile of this Task.


        :param precheckfile: The precheckfile of this Task.
        :type precheckfile: str
        """
        if precheckfile is None:
            raise ValueError("Invalid value for `precheckfile`, must not be `None`")  # noqa: E501
        if precheckfile is not None and len(precheckfile) < 15:
            raise ValueError("Invalid value for `precheckfile`, length must be greater than or equal to `15`")  # noqa: E501

        self._precheckfile = precheckfile

    @property
    def args(self):
        """Gets the args of this Task.


        :return: The args of this Task.
        :rtype: List[str]
        """
        return self._args

    @args.setter
    def args(self, args):
        """Sets the args of this Task.


        :param args: The args of this Task.
        :type args: List[str]
        """
        if args is None:
            raise ValueError("Invalid value for `args`, must not be `None`")  # noqa: E501

        self._args = args

    @property
    def postcheckfile(self):
        """Gets the postcheckfile of this Task.


        :return: The postcheckfile of this Task.
        :rtype: List[str]
        """
        return self._postcheckfile

    @postcheckfile.setter
    def postcheckfile(self, postcheckfile):
        """Sets the postcheckfile of this Task.


        :param postcheckfile: The postcheckfile of this Task.
        :type postcheckfile: List[str]
        """
        if postcheckfile is None:
            raise ValueError("Invalid value for `postcheckfile`, must not be `None`")  # noqa: E501

        self._postcheckfile = postcheckfile

    @property
    def inputmustache(self):
        """Gets the inputmustache of this Task.


        :return: The inputmustache of this Task.
        :rtype: str
        """
        return self._inputmustache

    @inputmustache.setter
    def inputmustache(self, inputmustache):
        """Sets the inputmustache of this Task.


        :param inputmustache: The inputmustache of this Task.
        :type inputmustache: str
        """
        if inputmustache is None:
            raise ValueError("Invalid value for `inputmustache`, must not be `None`")  # noqa: E501
        if inputmustache is not None and len(inputmustache) < 20:
            raise ValueError("Invalid value for `inputmustache`, length must be greater than or equal to `20`")  # noqa: E501

        self._inputmustache = inputmustache

    @property
    def replacemustache(self):
        """Gets the replacemustache of this Task.


        :return: The replacemustache of this Task.
        :rtype: str
        """
        return self._replacemustache

    @replacemustache.setter
    def replacemustache(self, replacemustache):
        """Sets the replacemustache of this Task.


        :param replacemustache: The replacemustache of this Task.
        :type replacemustache: str
        """
        if replacemustache is None:
            raise ValueError("Invalid value for `replacemustache`, must not be `None`")  # noqa: E501
        if replacemustache is not None and len(replacemustache) < 3:
            raise ValueError("Invalid value for `replacemustache`, length must be greater than or equal to `3`")  # noqa: E501

        self._replacemustache = replacemustache
