# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ch.inss.jwserver.models.base_model_ import Model
from ch.inss.jwserver import util


class Metadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author=None, username=None, appname=None, domain=None, dbtype=None, binaryfiles=None):  # noqa: E501
        """Metadata - a model defined in OpenAPI

        :param author: The author of this Metadata.  # noqa: E501
        :type author: str
        :param username: The username of this Metadata.  # noqa: E501
        :type username: str
        :param appname: The appname of this Metadata.  # noqa: E501
        :type appname: str
        :param domain: The domain of this Metadata.  # noqa: E501
        :type domain: str
        :param dbtype: The dbtype of this Metadata.  # noqa: E501
        :type dbtype: str
        :param binaryfiles: The binaryfiles of this Metadata.  # noqa: E501
        :type binaryfiles: List[str]
        """
        self.openapi_types = {
            'author': str,
            'username': str,
            'appname': str,
            'domain': str,
            'dbtype': str,
            'binaryfiles': List[str]
        }

        self.attribute_map = {
            'author': 'author',
            'username': 'username',
            'appname': 'appname',
            'domain': 'domain',
            'dbtype': 'dbtype',
            'binaryfiles': 'binaryfiles'
        }

        self._author = author
        self._username = username
        self._appname = appname
        self._domain = domain
        self._dbtype = dbtype
        self._binaryfiles = binaryfiles

    @classmethod
    def from_dict(cls, dikt) -> 'Metadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Metadata of this Metadata.  # noqa: E501
        :rtype: Metadata
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author(self):
        """Gets the author of this Metadata.


        :return: The author of this Metadata.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this Metadata.


        :param author: The author of this Metadata.
        :type author: str
        """
        if author is None:
            raise ValueError("Invalid value for `author`, must not be `None`")  # noqa: E501
        if author is not None and len(author) < 4:
            raise ValueError("Invalid value for `author`, length must be greater than or equal to `4`")  # noqa: E501

        self._author = author

    @property
    def username(self):
        """Gets the username of this Metadata.


        :return: The username of this Metadata.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Metadata.


        :param username: The username of this Metadata.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501
        if username is not None and len(username) < 7:
            raise ValueError("Invalid value for `username`, length must be greater than or equal to `7`")  # noqa: E501

        self._username = username

    @property
    def appname(self):
        """Gets the appname of this Metadata.


        :return: The appname of this Metadata.
        :rtype: str
        """
        return self._appname

    @appname.setter
    def appname(self, appname):
        """Sets the appname of this Metadata.


        :param appname: The appname of this Metadata.
        :type appname: str
        """
        if appname is None:
            raise ValueError("Invalid value for `appname`, must not be `None`")  # noqa: E501
        if appname is not None and len(appname) < 7:
            raise ValueError("Invalid value for `appname`, length must be greater than or equal to `7`")  # noqa: E501

        self._appname = appname

    @property
    def domain(self):
        """Gets the domain of this Metadata.


        :return: The domain of this Metadata.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this Metadata.


        :param domain: The domain of this Metadata.
        :type domain: str
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")  # noqa: E501
        if domain is not None and len(domain) < 11:
            raise ValueError("Invalid value for `domain`, length must be greater than or equal to `11`")  # noqa: E501

        self._domain = domain

    @property
    def dbtype(self):
        """Gets the dbtype of this Metadata.


        :return: The dbtype of this Metadata.
        :rtype: str
        """
        return self._dbtype

    @dbtype.setter
    def dbtype(self, dbtype):
        """Sets the dbtype of this Metadata.


        :param dbtype: The dbtype of this Metadata.
        :type dbtype: str
        """
        if dbtype is None:
            raise ValueError("Invalid value for `dbtype`, must not be `None`")  # noqa: E501
        if dbtype is not None and len(dbtype) < 8:
            raise ValueError("Invalid value for `dbtype`, length must be greater than or equal to `8`")  # noqa: E501

        self._dbtype = dbtype

    @property
    def binaryfiles(self):
        """Gets the binaryfiles of this Metadata.


        :return: The binaryfiles of this Metadata.
        :rtype: List[str]
        """
        return self._binaryfiles

    @binaryfiles.setter
    def binaryfiles(self, binaryfiles):
        """Sets the binaryfiles of this Metadata.


        :param binaryfiles: The binaryfiles of this Metadata.
        :type binaryfiles: List[str]
        """
        if binaryfiles is None:
            raise ValueError("Invalid value for `binaryfiles`, must not be `None`")  # noqa: E501

        self._binaryfiles = binaryfiles
